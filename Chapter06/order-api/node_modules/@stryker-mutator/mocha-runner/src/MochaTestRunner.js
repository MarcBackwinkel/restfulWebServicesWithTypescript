"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var test_runner_1 = require("@stryker-mutator/api/test_runner");
var LibWrapper_1 = require("./LibWrapper");
var StrykerMochaReporter_1 = require("./StrykerMochaReporter");
var utils_1 = require("./utils");
var plugin_1 = require("@stryker-mutator/api/plugin");
var DEFAULT_TEST_PATTERN = 'test/**/*.js';
var MochaTestRunner = /** @class */ (function () {
    function MochaTestRunner(log, allFileNames, options) {
        this.log = log;
        this.allFileNames = allFileNames;
        this.mochaOptions = options[utils_1.mochaOptionsKey];
        this.additionalRequires();
        StrykerMochaReporter_1.StrykerMochaReporter.log = log;
    }
    MochaTestRunner.prototype.init = function () {
        if (LibWrapper_1.default.handleFiles) {
            this.log.debug('Mocha >= 6 detected. Using mocha\'s `handleFiles` to load files');
            this.testFileNames = this.mocha6DiscoverFiles(LibWrapper_1.default.handleFiles);
        }
        else {
            this.log.debug('Mocha < 6 detected. Using custom logic to discover files');
            this.testFileNames = this.legacyDiscoverFiles();
        }
    };
    MochaTestRunner.prototype.mocha6DiscoverFiles = function (handleFiles) {
        var originalProcessExit = process.exit;
        try {
            // process.exit unfortunate side effect: https://github.com/mochajs/mocha/blob/07ea8763c663bdd3fe1f8446cdb62dae233f4916/lib/cli/run-helpers.js#L174
            process.exit = function () { };
            return handleFiles(this.mochaOptions);
        }
        finally {
            process.exit = originalProcessExit;
        }
    };
    MochaTestRunner.prototype.legacyDiscoverFiles = function () {
        var globPatterns = this.mochaFileGlobPatterns();
        var globPatternsAbsolute = globPatterns.map(function (glob) { return path.resolve(glob); });
        var fileNames = LibWrapper_1.default.multimatch(this.allFileNames.slice(), globPatternsAbsolute);
        if (fileNames.length) {
            this.log.debug("Using files: " + JSON.stringify(fileNames, null, 2));
        }
        else {
            this.log.debug("Tried " + JSON.stringify(globPatternsAbsolute, null, 2) + " on files: " + JSON.stringify(this.allFileNames, null, 2) + ".");
            throw new Error("[" + MochaTestRunner.name + "] No files discovered (tried pattern(s) " + JSON.stringify(globPatterns, null, 2) + "). Please specify the files (glob patterns) containing your tests in " + utils_1.mochaOptionsKey + ".files in your stryker.conf.js file.");
        }
        return fileNames;
    };
    MochaTestRunner.prototype.mochaFileGlobPatterns = function () {
        // Use both `spec` as `files`
        var globPatterns = [];
        if (this.mochaOptions.spec) {
            globPatterns.push.apply(globPatterns, this.mochaOptions.spec);
        }
        if (typeof this.mochaOptions.files === 'string') { // `files` if for backward compat
            globPatterns.push(this.mochaOptions.files);
        }
        else if (this.mochaOptions.files) {
            globPatterns.push.apply(globPatterns, this.mochaOptions.files);
        }
        if (!globPatterns.length) {
            globPatterns.push(DEFAULT_TEST_PATTERN);
        }
        return globPatterns;
    };
    MochaTestRunner.prototype.run = function (_a) {
        var _this = this;
        var testHooks = _a.testHooks;
        return new Promise(function (resolve, reject) {
            try {
                _this.purgeFiles();
                var mocha_1 = new LibWrapper_1.default.Mocha({ reporter: StrykerMochaReporter_1.StrykerMochaReporter, bail: true });
                _this.configure(mocha_1);
                _this.addTestHooks(mocha_1, testHooks);
                _this.addFiles(mocha_1);
                try {
                    mocha_1.run(function () {
                        var reporter = StrykerMochaReporter_1.StrykerMochaReporter.currentInstance;
                        if (reporter) {
                            var result = reporter.runResult;
                            resolve(result);
                        }
                        else {
                            var errorMsg = 'The StrykerMochaReporter was not instantiated properly. Could not retrieve the RunResult.';
                            _this.log.error(errorMsg);
                            resolve({
                                errorMessages: [errorMsg],
                                status: test_runner_1.RunStatus.Error,
                                tests: []
                            });
                        }
                    });
                }
                catch (error) {
                    resolve({
                        errorMessages: [error],
                        status: test_runner_1.RunStatus.Error,
                        tests: []
                    });
                }
            }
            catch (error) {
                _this.log.error(error);
                reject(error);
            }
        });
    };
    MochaTestRunner.prototype.purgeFiles = function () {
        this.allFileNames.forEach(function (fileName) { return delete require.cache[fileName]; });
    };
    MochaTestRunner.prototype.addFiles = function (mocha) {
        this.testFileNames.forEach(function (fileName) {
            mocha.addFile(fileName);
        });
    };
    MochaTestRunner.prototype.addTestHooks = function (mocha, testHooks) {
        if (testHooks) {
            var suite_1 = mocha.suite;
            suite_1.emit('pre-require', global, '', mocha);
            suite_1.emit('require', utils_1.evalGlobal(testHooks), '', mocha);
            suite_1.emit('post-require', global, '', mocha);
        }
    };
    MochaTestRunner.prototype.configure = function (mocha) {
        var options = this.mochaOptions;
        function setIfDefined(value, operation) {
            if (typeof value !== 'undefined') {
                operation.apply(mocha, [value]);
            }
        }
        if (options) {
            setIfDefined(options.asyncOnly, mocha.asyncOnly);
            setIfDefined(options.timeout, mocha.timeout);
            setIfDefined(options.ui, mocha.ui);
            setIfDefined(options.grep, mocha.grep);
        }
    };
    MochaTestRunner.prototype.additionalRequires = function () {
        if (this.mochaOptions.require) {
            var modulesToRequire = this.mochaOptions.require
                .map(function (moduleName) { return moduleName.startsWith('.') ? path.resolve(moduleName) : moduleName; });
            modulesToRequire.forEach(LibWrapper_1.default.require);
        }
    };
    MochaTestRunner.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.sandboxFileNames, plugin_1.commonTokens.options);
    return MochaTestRunner;
}());
exports.default = MochaTestRunner;
//# sourceMappingURL=MochaTestRunner.js.map